name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  lint:
    name: Run Pylint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install --no-cache-dir -r service1/requirements.txt
          pip install --no-cache-dir -r service2/requirements.txt

      - name: Run Pylint
        run: pylint $(git ls-files '*.py')

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: lint  # Only runs if linting passes
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set Image Tags
        id: vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "TAG=test" >> $GITHUB_ENV
          fi

      - name: Build and Push Service 1
        run: |
          docker build -t kristinakoneva/service1:${{ env.TAG }} ./service1
          docker push kristinakoneva/service1:${{ env.TAG }}

      - name: Build and Push Service 2
        run: |
          docker build -t kristinakoneva/service2:${{ env.TAG }} ./service2
          docker push kristinakoneva/service2:${{ env.TAG }}


 # Using Kubernetes locally for now, uncommentand adjust when Kubernetes cluster is hosted remotely.
 
 # deploy:
 #   needs: build-and-push
 #   runs-on: ubuntu-latest
 #   steps: 
 #     - name: Checkout code
 #       uses: actions/checkout@v3
         
 #     - name: Set up Kubernetes
 #       uses: azure/setup-kubectl@v3

 #     - name: Deploy to Kubernetes
 #       run: |
 #         kubectl apply -f kubernetes/service1-deployment.yaml
 #         kubectl apply -f kubernetes/service1-service.yaml
 #         kubectl apply -f kubernetes/service2-deployment.yaml
 #         kubectl apply -f kubernetes/service2-service.yaml
